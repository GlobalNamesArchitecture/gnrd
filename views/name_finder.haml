- if @output[:status] == 303
  - if @output[:queue_size] && @output[:queue_size] > 0
    #found-names-loader Waiting in the queue...
  - else
    #found-names-loader Processing...
- else
  #output-format
    %span
      %a{ href: "#{request.base_url}/name_finder.json?token=#{@nf[:token]}"  } JSON
    %span
      %a{ href: "#{request.base_url}/name_finder.xml?token=#{@nf[:token]}"  } XML

  %p#found-names-duration
    Results are accessible at this URL for 2 days.
    See JSON or XML output for more details.
  %ul#found-names-summary
    - if !@output[:input_url].blank?
      %li
        %strong
          - ellipsis = (@output[:input_url].length > 105) ? @output[:input_url][0..102] + "..." : @output[:input_url]
          #{ellipsis}
    - if !@output[:file].blank?
      %li
        %strong #{@output[:file]}
    - if !@output[:total].blank? && @output[:status] == 200
      %li
        %strong #{@output[:total]}
        - if @output[:unique]
          %strong unique
        - if @output[:total] == 1 || !@output[:unique]
          name
        - else
          names
        - if !@output[:unique]
          %strong instances
        found using
        %strong #{@output[:engines].join(" and ")}
        - if @output[:engines] == ["TaxonFinder"] && @output[:english] == false
          (NetiNeti was not used)
    - if @output[:execution_time] && @output[:status] == 200
      %li
        #{sprintf("%.3f", @output[:execution_time][:text_preparation_duration])}s to prepare text,
        #{sprintf("%.3f", @output[:execution_time][:find_names_duration])}s to find names,
        - if @output[:execution_time][:resolve_names_duration]
          #{sprintf("%.3f", @output[:execution_time][:resolve_names_duration])}s to resolve names,
        #{sprintf("%.3f", @output[:execution_time][:total_duration])}s for entire process
  - if @output[:total] && @output[:total] > 0

    %table#found-names-grid
      %thead
        %tr
          - if @output[:verbatim]
            %th Found Verbatim Strings
          %th
            %a{:name => "found-names"} Found Scientific Names
      %tbody
        - cycle = "odd"
        - @output[:names].sort { |a,b| a[:scientificName] <=> b[:scientificName] }.each do |name|
          - cycle = (cycle == "odd") ? "even" : "odd"
          %tr{:class => cycle}
            - if @output[:verbatim]
              %td= name[:verbatim]
            %td= name[:scientificName]
